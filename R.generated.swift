//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 146 images.
  struct image {
    /// Image `LaunchImage`.
    static let launchImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "LaunchImage")
    /// Image `NavIcon`.
    static let navIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "NavIcon")
    /// Image `acq_ok`.
    static let acq_ok = Rswift.ImageResource(bundle: R.hostingBundle, name: "acq_ok")
    /// Image `actProd`.
    static let actProd = Rswift.ImageResource(bundle: R.hostingBundle, name: "actProd")
    /// Image `actTicket`.
    static let actTicket = Rswift.ImageResource(bundle: R.hostingBundle, name: "actTicket")
    /// Image `act_left_bg`.
    static let act_left_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "act_left_bg")
    /// Image `arrowBottom`.
    static let arrowBottom = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrowBottom")
    /// Image `arrow`.
    static let arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow")
    /// Image `back`.
    static let back = Rswift.ImageResource(bundle: R.hostingBundle, name: "back")
    /// Image `bannerProduct`.
    static let bannerProduct = Rswift.ImageResource(bundle: R.hostingBundle, name: "bannerProduct")
    /// Image `bannerPromotion`.
    static let bannerPromotion = Rswift.ImageResource(bundle: R.hostingBundle, name: "bannerPromotion")
    /// Image `bannerSchool`.
    static let bannerSchool = Rswift.ImageResource(bundle: R.hostingBundle, name: "bannerSchool")
    /// Image `bar_wait_act`.
    static let bar_wait_act = Rswift.ImageResource(bundle: R.hostingBundle, name: "bar_wait_act")
    /// Image `bg_120_75`.
    static let bg_120_75 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_120_75")
    /// Image `bg_180_135`.
    static let bg_180_135 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_180_135")
    /// Image `bg_180_64`.
    static let bg_180_64 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_180_64")
    /// Image `bg_200`.
    static let bg_200 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_200")
    /// Image `bg_400_122`.
    static let bg_400_122 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_400_122")
    /// Image `bg_500_700`.
    static let bg_500_700 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_500_700")
    /// Image `bg_type_add`.
    static let bg_type_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_type_add")
    /// Image `bg_type_lv2`.
    static let bg_type_lv2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_type_lv2")
    /// Image `brush_base`.
    static let brush_base = Rswift.ImageResource(bundle: R.hostingBundle, name: "brush_base")
    /// Image `brush`.
    static let brush = Rswift.ImageResource(bundle: R.hostingBundle, name: "brush")
    /// Image `examRes`.
    static let examRes = Rswift.ImageResource(bundle: R.hostingBundle, name: "examRes")
    /// Image `face_2`.
    static let face_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "face_2")
    /// Image `gift_ticket_bg`.
    static let gift_ticket_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "gift_ticket_bg")
    /// Image `gift_ticket_old_bg`.
    static let gift_ticket_old_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "gift_ticket_old_bg")
    /// Image `home_1`.
    static let home_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_1")
    /// Image `home_2`.
    static let home_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_2")
    /// Image `hotInfo_center_bg`.
    static let hotInfo_center_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "hotInfo_center_bg")
    /// Image `hotInfo_left_bg`.
    static let hotInfo_left_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "hotInfo_left_bg")
    /// Image `hotInfo_right_bg`.
    static let hotInfo_right_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "hotInfo_right_bg")
    /// Image `howGetPoint`.
    static let howGetPoint = Rswift.ImageResource(bundle: R.hostingBundle, name: "howGetPoint")
    /// Image `icon_bought`.
    static let icon_bought = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_bought")
    /// Image `icon_howto`.
    static let icon_howto = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_howto")
    /// Image `icon_info_wait`.
    static let icon_info_wait = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_info_wait")
    /// Image `icon_locatioin`.
    static let icon_locatioin = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_locatioin")
    /// Image `icon_msg1`.
    static let icon_msg1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_msg1")
    /// Image `icon_msg2`.
    static let icon_msg2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_msg2")
    /// Image `icon_msg3`.
    static let icon_msg3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_msg3")
    /// Image `icon_msg4`.
    static let icon_msg4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_msg4")
    /// Image `icon_msg5`.
    static let icon_msg5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_msg5")
    /// Image `icon_my`.
    static let icon_my = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_my")
    /// Image `icon_pop_close`.
    static let icon_pop_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_pop_close")
    /// Image `icon_prod_type`.
    static let icon_prod_type = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_prod_type")
    /// Image `icon_sign`.
    static let icon_sign = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_sign")
    /// Image `icon_study`.
    static let icon_study = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_study")
    /// Image `index_bg`.
    static let index_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "index_bg")
    /// Image `info5`.
    static let info5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "info5")
    /// Image `info_new`.
    static let info_new = Rswift.ImageResource(bundle: R.hostingBundle, name: "info_new")
    /// Image `info_type_add`.
    static let info_type_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "info_type_add")
    /// Image `loading_dog`.
    static let loading_dog = Rswift.ImageResource(bundle: R.hostingBundle, name: "loading_dog")
    /// Image `loading_rotate`.
    static let loading_rotate = Rswift.ImageResource(bundle: R.hostingBundle, name: "loading_rotate")
    /// Image `logo_homepage`.
    static let logo_homepage = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_homepage")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `md0`.
    static let md0 = Rswift.ImageResource(bundle: R.hostingBundle, name: "md0")
    /// Image `md1`.
    static let md1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "md1")
    /// Image `md2`.
    static let md2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "md2")
    /// Image `md3`.
    static let md3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "md3")
    /// Image `me_1`.
    static let me_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "me_1")
    /// Image `me_2`.
    static let me_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "me_2")
    /// Image `message_1`.
    static let message_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "message_1")
    /// Image `message_2`.
    static let message_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "message_2")
    /// Image `myInfo_bg`.
    static let myInfo_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "myInfo_bg")
    /// Image `my_lv_cur`.
    static let my_lv_cur = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_lv_cur")
    /// Image `my_lv_full`.
    static let my_lv_full = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_lv_full")
    /// Image `my_lv_point_end`.
    static let my_lv_point_end = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_lv_point_end")
    /// Image `my_lv_point_pass`.
    static let my_lv_point_pass = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_lv_point_pass")
    /// Image `my_lv_point`.
    static let my_lv_point = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_lv_point")
    /// Image `my_op01`.
    static let my_op01 = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_op01")
    /// Image `my_op02`.
    static let my_op02 = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_op02")
    /// Image `my_op03`.
    static let my_op03 = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_op03")
    /// Image `my_op04`.
    static let my_op04 = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_op04")
    /// Image `my_op05`.
    static let my_op05 = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_op05")
    /// Image `my_op06`.
    static let my_op06 = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_op06")
    /// Image `my_op07`.
    static let my_op07 = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_op07")
    /// Image `my_op08`.
    static let my_op08 = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_op08")
    /// Image `my_op09`.
    static let my_op09 = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_op09")
    /// Image `my_right2`.
    static let my_right2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_right2")
    /// Image `my_right3`.
    static let my_right3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_right3")
    /// Image `my_right4`.
    static let my_right4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_right4")
    /// Image `my_right5`.
    static let my_right5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_right5")
    /// Image `my_right6`.
    static let my_right6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_right6")
    /// Image `my_sex1`.
    static let my_sex1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_sex1")
    /// Image `my_sex2`.
    static let my_sex2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_sex2")
    /// Image `my_star`.
    static let my_star = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_star")
    /// Image `my_v0`.
    static let my_v0 = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_v0")
    /// Image `my_v1_big`.
    static let my_v1_big = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_v1_big")
    /// Image `my_v1`.
    static let my_v1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_v1")
    /// Image `my_v2_big`.
    static let my_v2_big = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_v2_big")
    /// Image `my_v2`.
    static let my_v2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_v2")
    /// Image `my_v3_big`.
    static let my_v3_big = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_v3_big")
    /// Image `my_v3`.
    static let my_v3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_v3")
    /// Image `my_v4_big`.
    static let my_v4_big = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_v4_big")
    /// Image `my_v4`.
    static let my_v4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_v4")
    /// Image `my_v5_big`.
    static let my_v5_big = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_v5_big")
    /// Image `my_v5`.
    static let my_v5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_v5")
    /// Image `my_v6_big`.
    static let my_v6_big = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_v6_big")
    /// Image `my_v6`.
    static let my_v6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_v6")
    /// Image `my_v7_big`.
    static let my_v7_big = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_v7_big")
    /// Image `my_v7`.
    static let my_v7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_v7")
    /// Image `nav_bg`.
    static let nav_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "nav_bg")
    /// Image `pro_banner1`.
    static let pro_banner1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "pro_banner1")
    /// Image `pro_banner2`.
    static let pro_banner2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "pro_banner2")
    /// Image `pro_info1`.
    static let pro_info1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "pro_info1")
    /// Image `pro_info2`.
    static let pro_info2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "pro_info2")
    /// Image `prodTypeBg`.
    static let prodTypeBg = Rswift.ImageResource(bundle: R.hostingBundle, name: "prodTypeBg")
    /// Image `promotion_1`.
    static let promotion_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "promotion_1")
    /// Image `promotion_2`.
    static let promotion_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "promotion_2")
    /// Image `reg_logo_bottom`.
    static let reg_logo_bottom = Rswift.ImageResource(bundle: R.hostingBundle, name: "reg_logo_bottom")
    /// Image `reg_logo`.
    static let reg_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "reg_logo")
    /// Image `sg0`.
    static let sg0 = Rswift.ImageResource(bundle: R.hostingBundle, name: "sg0")
    /// Image `sg1`.
    static let sg1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "sg1")
    /// Image `sg2`.
    static let sg2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "sg2")
    /// Image `sg3`.
    static let sg3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "sg3")
    /// Image `shop_base`.
    static let shop_base = Rswift.ImageResource(bundle: R.hostingBundle, name: "shop_base")
    /// Image `sign_ok`.
    static let sign_ok = Rswift.ImageResource(bundle: R.hostingBundle, name: "sign_ok")
    /// Image `tab_home`.
    static let tab_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_home")
    /// Image `tab_info`.
    static let tab_info = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_info")
    /// Image `tab_pro`.
    static let tab_pro = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_pro")
    /// Image `tg_fruit1`.
    static let tg_fruit1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "tg_fruit1")
    /// Image `tg_fruit2`.
    static let tg_fruit2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "tg_fruit2")
    /// Image `tg_fruit3`.
    static let tg_fruit3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "tg_fruit3")
    /// Image `tg_fruit4`.
    static let tg_fruit4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "tg_fruit4")
    /// Image `tg_fruit5`.
    static let tg_fruit5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "tg_fruit5")
    /// Image `tg_fruit_bg`.
    static let tg_fruit_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "tg_fruit_bg")
    /// Image `tg_fruit_empty`.
    static let tg_fruit_empty = Rswift.ImageResource(bundle: R.hostingBundle, name: "tg_fruit_empty")
    /// Image `tg_game_bg`.
    static let tg_game_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "tg_game_bg")
    /// Image `tg_introduce`.
    static let tg_introduce = Rswift.ImageResource(bundle: R.hostingBundle, name: "tg_introduce")
    /// Image `tg_lost`.
    static let tg_lost = Rswift.ImageResource(bundle: R.hostingBundle, name: "tg_lost")
    /// Image `tg_n0`.
    static let tg_n0 = Rswift.ImageResource(bundle: R.hostingBundle, name: "tg_n0")
    /// Image `tg_n1`.
    static let tg_n1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "tg_n1")
    /// Image `tg_n2`.
    static let tg_n2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "tg_n2")
    /// Image `tg_n3`.
    static let tg_n3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "tg_n3")
    /// Image `tg_n4`.
    static let tg_n4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "tg_n4")
    /// Image `tg_n5`.
    static let tg_n5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "tg_n5")
    /// Image `tg_n6`.
    static let tg_n6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "tg_n6")
    /// Image `tg_n7`.
    static let tg_n7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "tg_n7")
    /// Image `tg_n8`.
    static let tg_n8 = Rswift.ImageResource(bundle: R.hostingBundle, name: "tg_n8")
    /// Image `tg_n9`.
    static let tg_n9 = Rswift.ImageResource(bundle: R.hostingBundle, name: "tg_n9")
    /// Image `tg_n_empty`.
    static let tg_n_empty = Rswift.ImageResource(bundle: R.hostingBundle, name: "tg_n_empty")
    /// Image `tg_playTime`.
    static let tg_playTime = Rswift.ImageResource(bundle: R.hostingBundle, name: "tg_playTime")
    /// Image `tg_start`.
    static let tg_start = Rswift.ImageResource(bundle: R.hostingBundle, name: "tg_start")
    /// Image `tg_win`.
    static let tg_win = Rswift.ImageResource(bundle: R.hostingBundle, name: "tg_win")
    /// Image `unread_left`.
    static let unread_left = Rswift.ImageResource(bundle: R.hostingBundle, name: "unread_left")
    /// Image `unread_right`.
    static let unread_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "unread_right")
    
    /// `UIImage(named: "LaunchImage", bundle: ..., traitCollection: ...)`
    static func launchImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launchImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "NavIcon", bundle: ..., traitCollection: ...)`
    static func navIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "acq_ok", bundle: ..., traitCollection: ...)`
    static func acq_ok(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.acq_ok, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "actProd", bundle: ..., traitCollection: ...)`
    static func actProd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.actProd, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "actTicket", bundle: ..., traitCollection: ...)`
    static func actTicket(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.actTicket, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "act_left_bg", bundle: ..., traitCollection: ...)`
    static func act_left_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.act_left_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "arrow", bundle: ..., traitCollection: ...)`
    static func arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "arrowBottom", bundle: ..., traitCollection: ...)`
    static func arrowBottom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowBottom, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "back", bundle: ..., traitCollection: ...)`
    static func back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bannerProduct", bundle: ..., traitCollection: ...)`
    static func bannerProduct(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bannerProduct, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bannerPromotion", bundle: ..., traitCollection: ...)`
    static func bannerPromotion(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bannerPromotion, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bannerSchool", bundle: ..., traitCollection: ...)`
    static func bannerSchool(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bannerSchool, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bar_wait_act", bundle: ..., traitCollection: ...)`
    static func bar_wait_act(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bar_wait_act, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bg_120_75", bundle: ..., traitCollection: ...)`
    static func bg_120_75(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_120_75, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bg_180_135", bundle: ..., traitCollection: ...)`
    static func bg_180_135(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_180_135, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bg_180_64", bundle: ..., traitCollection: ...)`
    static func bg_180_64(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_180_64, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bg_200", bundle: ..., traitCollection: ...)`
    static func bg_200(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_200, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bg_400_122", bundle: ..., traitCollection: ...)`
    static func bg_400_122(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_400_122, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bg_500_700", bundle: ..., traitCollection: ...)`
    static func bg_500_700(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_500_700, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bg_type_add", bundle: ..., traitCollection: ...)`
    static func bg_type_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_type_add, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bg_type_lv2", bundle: ..., traitCollection: ...)`
    static func bg_type_lv2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_type_lv2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "brush", bundle: ..., traitCollection: ...)`
    static func brush(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.brush, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "brush_base", bundle: ..., traitCollection: ...)`
    static func brush_base(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.brush_base, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "examRes", bundle: ..., traitCollection: ...)`
    static func examRes(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.examRes, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "face_2", bundle: ..., traitCollection: ...)`
    static func face_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.face_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gift_ticket_bg", bundle: ..., traitCollection: ...)`
    static func gift_ticket_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gift_ticket_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gift_ticket_old_bg", bundle: ..., traitCollection: ...)`
    static func gift_ticket_old_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gift_ticket_old_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "home_1", bundle: ..., traitCollection: ...)`
    static func home_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "home_2", bundle: ..., traitCollection: ...)`
    static func home_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "hotInfo_center_bg", bundle: ..., traitCollection: ...)`
    static func hotInfo_center_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hotInfo_center_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "hotInfo_left_bg", bundle: ..., traitCollection: ...)`
    static func hotInfo_left_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hotInfo_left_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "hotInfo_right_bg", bundle: ..., traitCollection: ...)`
    static func hotInfo_right_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hotInfo_right_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "howGetPoint", bundle: ..., traitCollection: ...)`
    static func howGetPoint(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.howGetPoint, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_bought", bundle: ..., traitCollection: ...)`
    static func icon_bought(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_bought, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_howto", bundle: ..., traitCollection: ...)`
    static func icon_howto(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_howto, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_info_wait", bundle: ..., traitCollection: ...)`
    static func icon_info_wait(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_info_wait, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_locatioin", bundle: ..., traitCollection: ...)`
    static func icon_locatioin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_locatioin, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_msg1", bundle: ..., traitCollection: ...)`
    static func icon_msg1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_msg1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_msg2", bundle: ..., traitCollection: ...)`
    static func icon_msg2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_msg2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_msg3", bundle: ..., traitCollection: ...)`
    static func icon_msg3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_msg3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_msg4", bundle: ..., traitCollection: ...)`
    static func icon_msg4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_msg4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_msg5", bundle: ..., traitCollection: ...)`
    static func icon_msg5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_msg5, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_my", bundle: ..., traitCollection: ...)`
    static func icon_my(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_my, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_pop_close", bundle: ..., traitCollection: ...)`
    static func icon_pop_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_pop_close, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_prod_type", bundle: ..., traitCollection: ...)`
    static func icon_prod_type(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_prod_type, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_sign", bundle: ..., traitCollection: ...)`
    static func icon_sign(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_sign, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_study", bundle: ..., traitCollection: ...)`
    static func icon_study(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_study, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "index_bg", bundle: ..., traitCollection: ...)`
    static func index_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.index_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "info5", bundle: ..., traitCollection: ...)`
    static func info5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.info5, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "info_new", bundle: ..., traitCollection: ...)`
    static func info_new(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.info_new, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "info_type_add", bundle: ..., traitCollection: ...)`
    static func info_type_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.info_type_add, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "loading_dog", bundle: ..., traitCollection: ...)`
    static func loading_dog(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loading_dog, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "loading_rotate", bundle: ..., traitCollection: ...)`
    static func loading_rotate(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loading_rotate, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo_homepage", bundle: ..., traitCollection: ...)`
    static func logo_homepage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_homepage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "md0", bundle: ..., traitCollection: ...)`
    static func md0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.md0, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "md1", bundle: ..., traitCollection: ...)`
    static func md1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.md1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "md2", bundle: ..., traitCollection: ...)`
    static func md2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.md2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "md3", bundle: ..., traitCollection: ...)`
    static func md3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.md3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "me_1", bundle: ..., traitCollection: ...)`
    static func me_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.me_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "me_2", bundle: ..., traitCollection: ...)`
    static func me_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.me_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "message_1", bundle: ..., traitCollection: ...)`
    static func message_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.message_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "message_2", bundle: ..., traitCollection: ...)`
    static func message_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.message_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "myInfo_bg", bundle: ..., traitCollection: ...)`
    static func myInfo_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.myInfo_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "my_lv_cur", bundle: ..., traitCollection: ...)`
    static func my_lv_cur(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_lv_cur, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "my_lv_full", bundle: ..., traitCollection: ...)`
    static func my_lv_full(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_lv_full, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "my_lv_point", bundle: ..., traitCollection: ...)`
    static func my_lv_point(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_lv_point, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "my_lv_point_end", bundle: ..., traitCollection: ...)`
    static func my_lv_point_end(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_lv_point_end, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "my_lv_point_pass", bundle: ..., traitCollection: ...)`
    static func my_lv_point_pass(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_lv_point_pass, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "my_op01", bundle: ..., traitCollection: ...)`
    static func my_op01(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_op01, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "my_op02", bundle: ..., traitCollection: ...)`
    static func my_op02(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_op02, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "my_op03", bundle: ..., traitCollection: ...)`
    static func my_op03(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_op03, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "my_op04", bundle: ..., traitCollection: ...)`
    static func my_op04(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_op04, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "my_op05", bundle: ..., traitCollection: ...)`
    static func my_op05(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_op05, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "my_op06", bundle: ..., traitCollection: ...)`
    static func my_op06(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_op06, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "my_op07", bundle: ..., traitCollection: ...)`
    static func my_op07(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_op07, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "my_op08", bundle: ..., traitCollection: ...)`
    static func my_op08(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_op08, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "my_op09", bundle: ..., traitCollection: ...)`
    static func my_op09(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_op09, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "my_right2", bundle: ..., traitCollection: ...)`
    static func my_right2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_right2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "my_right3", bundle: ..., traitCollection: ...)`
    static func my_right3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_right3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "my_right4", bundle: ..., traitCollection: ...)`
    static func my_right4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_right4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "my_right5", bundle: ..., traitCollection: ...)`
    static func my_right5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_right5, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "my_right6", bundle: ..., traitCollection: ...)`
    static func my_right6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_right6, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "my_sex1", bundle: ..., traitCollection: ...)`
    static func my_sex1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_sex1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "my_sex2", bundle: ..., traitCollection: ...)`
    static func my_sex2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_sex2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "my_star", bundle: ..., traitCollection: ...)`
    static func my_star(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_star, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "my_v0", bundle: ..., traitCollection: ...)`
    static func my_v0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_v0, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "my_v1", bundle: ..., traitCollection: ...)`
    static func my_v1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_v1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "my_v1_big", bundle: ..., traitCollection: ...)`
    static func my_v1_big(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_v1_big, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "my_v2", bundle: ..., traitCollection: ...)`
    static func my_v2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_v2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "my_v2_big", bundle: ..., traitCollection: ...)`
    static func my_v2_big(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_v2_big, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "my_v3", bundle: ..., traitCollection: ...)`
    static func my_v3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_v3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "my_v3_big", bundle: ..., traitCollection: ...)`
    static func my_v3_big(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_v3_big, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "my_v4", bundle: ..., traitCollection: ...)`
    static func my_v4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_v4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "my_v4_big", bundle: ..., traitCollection: ...)`
    static func my_v4_big(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_v4_big, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "my_v5", bundle: ..., traitCollection: ...)`
    static func my_v5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_v5, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "my_v5_big", bundle: ..., traitCollection: ...)`
    static func my_v5_big(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_v5_big, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "my_v6", bundle: ..., traitCollection: ...)`
    static func my_v6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_v6, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "my_v6_big", bundle: ..., traitCollection: ...)`
    static func my_v6_big(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_v6_big, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "my_v7", bundle: ..., traitCollection: ...)`
    static func my_v7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_v7, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "my_v7_big", bundle: ..., traitCollection: ...)`
    static func my_v7_big(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_v7_big, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "nav_bg", bundle: ..., traitCollection: ...)`
    static func nav_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nav_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pro_banner1", bundle: ..., traitCollection: ...)`
    static func pro_banner1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pro_banner1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pro_banner2", bundle: ..., traitCollection: ...)`
    static func pro_banner2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pro_banner2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pro_info1", bundle: ..., traitCollection: ...)`
    static func pro_info1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pro_info1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pro_info2", bundle: ..., traitCollection: ...)`
    static func pro_info2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pro_info2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "prodTypeBg", bundle: ..., traitCollection: ...)`
    static func prodTypeBg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.prodTypeBg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "promotion_1", bundle: ..., traitCollection: ...)`
    static func promotion_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.promotion_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "promotion_2", bundle: ..., traitCollection: ...)`
    static func promotion_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.promotion_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "reg_logo", bundle: ..., traitCollection: ...)`
    static func reg_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.reg_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "reg_logo_bottom", bundle: ..., traitCollection: ...)`
    static func reg_logo_bottom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.reg_logo_bottom, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sg0", bundle: ..., traitCollection: ...)`
    static func sg0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sg0, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sg1", bundle: ..., traitCollection: ...)`
    static func sg1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sg1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sg2", bundle: ..., traitCollection: ...)`
    static func sg2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sg2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sg3", bundle: ..., traitCollection: ...)`
    static func sg3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sg3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "shop_base", bundle: ..., traitCollection: ...)`
    static func shop_base(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shop_base, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sign_ok", bundle: ..., traitCollection: ...)`
    static func sign_ok(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sign_ok, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tab_home", bundle: ..., traitCollection: ...)`
    static func tab_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_home, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tab_info", bundle: ..., traitCollection: ...)`
    static func tab_info(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_info, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tab_pro", bundle: ..., traitCollection: ...)`
    static func tab_pro(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_pro, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tg_fruit1", bundle: ..., traitCollection: ...)`
    static func tg_fruit1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tg_fruit1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tg_fruit2", bundle: ..., traitCollection: ...)`
    static func tg_fruit2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tg_fruit2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tg_fruit3", bundle: ..., traitCollection: ...)`
    static func tg_fruit3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tg_fruit3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tg_fruit4", bundle: ..., traitCollection: ...)`
    static func tg_fruit4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tg_fruit4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tg_fruit5", bundle: ..., traitCollection: ...)`
    static func tg_fruit5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tg_fruit5, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tg_fruit_bg", bundle: ..., traitCollection: ...)`
    static func tg_fruit_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tg_fruit_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tg_fruit_empty", bundle: ..., traitCollection: ...)`
    static func tg_fruit_empty(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tg_fruit_empty, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tg_game_bg", bundle: ..., traitCollection: ...)`
    static func tg_game_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tg_game_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tg_introduce", bundle: ..., traitCollection: ...)`
    static func tg_introduce(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tg_introduce, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tg_lost", bundle: ..., traitCollection: ...)`
    static func tg_lost(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tg_lost, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tg_n0", bundle: ..., traitCollection: ...)`
    static func tg_n0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tg_n0, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tg_n1", bundle: ..., traitCollection: ...)`
    static func tg_n1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tg_n1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tg_n2", bundle: ..., traitCollection: ...)`
    static func tg_n2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tg_n2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tg_n3", bundle: ..., traitCollection: ...)`
    static func tg_n3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tg_n3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tg_n4", bundle: ..., traitCollection: ...)`
    static func tg_n4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tg_n4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tg_n5", bundle: ..., traitCollection: ...)`
    static func tg_n5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tg_n5, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tg_n6", bundle: ..., traitCollection: ...)`
    static func tg_n6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tg_n6, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tg_n7", bundle: ..., traitCollection: ...)`
    static func tg_n7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tg_n7, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tg_n8", bundle: ..., traitCollection: ...)`
    static func tg_n8(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tg_n8, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tg_n9", bundle: ..., traitCollection: ...)`
    static func tg_n9(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tg_n9, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tg_n_empty", bundle: ..., traitCollection: ...)`
    static func tg_n_empty(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tg_n_empty, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tg_playTime", bundle: ..., traitCollection: ...)`
    static func tg_playTime(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tg_playTime, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tg_start", bundle: ..., traitCollection: ...)`
    static func tg_start(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tg_start, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tg_win", bundle: ..., traitCollection: ...)`
    static func tg_win(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tg_win, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "unread_left", bundle: ..., traitCollection: ...)`
    static func unread_left(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unread_left, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "unread_right", bundle: ..., traitCollection: ...)`
    static func unread_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unread_right, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 8 nibs.
  struct nib {
    /// Nib `H5ViewController`.
    static let h5ViewController = _R.nib._H5ViewController()
    /// Nib `ImageCollectionViewCell`.
    static let imageCollectionViewCell = _R.nib._ImageCollectionViewCell()
    /// Nib `MsgTypeCell`.
    static let msgTypeCell = _R.nib._MsgTypeCell()
    /// Nib `ProBannerCell`.
    static let proBannerCell = _R.nib._ProBannerCell()
    /// Nib `ProdCell`.
    static let prodCell = _R.nib._ProdCell()
    /// Nib `ProdTypeCell`.
    static let prodTypeCell = _R.nib._ProdTypeCell()
    /// Nib `ProdTypeHeadCell`.
    static let prodTypeHeadCell = _R.nib._ProdTypeHeadCell()
    /// Nib `SignView`.
    static let signView = _R.nib._SignView()
    
    /// `UINib(name: "H5ViewController", in: bundle)`
    static func h5ViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.h5ViewController)
    }
    
    /// `UINib(name: "ImageCollectionViewCell", in: bundle)`
    static func imageCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.imageCollectionViewCell)
    }
    
    /// `UINib(name: "MsgTypeCell", in: bundle)`
    static func msgTypeCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.msgTypeCell)
    }
    
    /// `UINib(name: "ProBannerCell", in: bundle)`
    static func proBannerCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.proBannerCell)
    }
    
    /// `UINib(name: "ProdCell", in: bundle)`
    static func prodCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.prodCell)
    }
    
    /// `UINib(name: "ProdTypeCell", in: bundle)`
    static func prodTypeCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.prodTypeCell)
    }
    
    /// `UINib(name: "ProdTypeHeadCell", in: bundle)`
    static func prodTypeHeadCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.prodTypeHeadCell)
    }
    
    /// `UINib(name: "SignView", in: bundle)`
    static func signView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.signView)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 1 view controllers.
  struct segue {
    /// This struct is generated for `HomeVC`, and contains static references to 1 segues.
    struct homeVC {
      /// Segue identifier `goProdType`.
      static let goProdType: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, HomeVC, ProdTypeVC> = Rswift.StoryboardSegueIdentifier(identifier: "goProdType")
      
      /// Optionally returns a typed version of segue `goProdType`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goProdType(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, HomeVC, ProdTypeVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.homeVC.goProdType, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 6 storyboards.
  struct storyboard {
    /// Storyboard `Home`.
    static let home = _R.storyboard.home()
    /// Storyboard `Infomation`.
    static let infomation = _R.storyboard.infomation()
    /// Storyboard `Login`.
    static let login = _R.storyboard.login()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `Me`.
    static let me = _R.storyboard.me()
    /// Storyboard `Promotion`.
    static let promotion = _R.storyboard.promotion()
    
    /// `UIStoryboard(name: "Home", bundle: ...)`
    static func home(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.home)
    }
    
    /// `UIStoryboard(name: "Infomation", bundle: ...)`
    static func infomation(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.infomation)
    }
    
    /// `UIStoryboard(name: "Login", bundle: ...)`
    static func login(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.login)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "Me", bundle: ...)`
    static func me(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.me)
    }
    
    /// `UIStoryboard(name: "Promotion", bundle: ...)`
    static func promotion(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.promotion)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _SignView.validate()
      try _ProdTypeHeadCell.validate()
    }
    
    struct _H5ViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "H5ViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _ImageCollectionViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ImageCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ImageCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ImageCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _MsgTypeCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MsgTypeCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MsgTypeCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MsgTypeCell
      }
      
      fileprivate init() {}
    }
    
    struct _ProBannerCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ProBannerCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ProBannerCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProBannerCell
      }
      
      fileprivate init() {}
    }
    
    struct _ProdCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ProdCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ProdCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProdCell
      }
      
      fileprivate init() {}
    }
    
    struct _ProdTypeCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ProdTypeCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ProdTypeCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProdTypeCell
      }
      
      fileprivate init() {}
    }
    
    struct _ProdTypeHeadCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ProdTypeHeadCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ProdTypeHeadCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProdTypeHeadCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "arrowBottom", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrowBottom' is used in nib 'ProdTypeHeadCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _SignView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SignView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "sign_ok", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sign_ok' is used in nib 'SignView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try promotion.validate()
      try login.validate()
      try me.validate()
      try home.validate()
      try infomation.validate()
    }
    
    struct home: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = BaseNavController
      
      let bundle = R.hostingBundle
      let name = "Home"
      
      static func validate() throws {
        if UIKit.UIImage(named: "bg_180_135") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_180_135' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "NavIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'NavIcon' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_180_64") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_180_64' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_prod_type") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_prod_type' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_sign") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_sign' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_study") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_study' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hotInfo_right_bg") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hotInfo_right_bg' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hotInfo_left_bg") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hotInfo_left_bg' is used in storyboard 'Home', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct infomation: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = BaseNavController
      
      let bundle = R.hostingBundle
      let name = "Infomation"
      
      static func validate() throws {
        if UIKit.UIImage(named: "NavIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'NavIcon' is used in storyboard 'Infomation', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct login: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = LoginVC
      
      let bundle = R.hostingBundle
      let name = "Login"
      
      static func validate() throws {
        if UIKit.UIImage(named: "index_bg") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'index_bg' is used in storyboard 'Login', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = MainVC
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      fileprivate init() {}
    }
    
    struct me: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = BaseNavController
      
      let bundle = R.hostingBundle
      let name = "Me"
      
      static func validate() throws {
        if UIKit.UIImage(named: "my_v1_big") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'my_v1_big' is used in storyboard 'Me', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_sign") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_sign' is used in storyboard 'Me', but couldn't be loaded.") }
        if UIKit.UIImage(named: "howGetPoint") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'howGetPoint' is used in storyboard 'Me', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_locatioin") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_locatioin' is used in storyboard 'Me', but couldn't be loaded.") }
        if UIKit.UIImage(named: "my_sex1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'my_sex1' is used in storyboard 'Me', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct promotion: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = BaseNavController
      
      let bundle = R.hostingBundle
      let name = "Promotion"
      let proInfoVC = StoryboardViewControllerResource<ProInfoVC>(identifier: "ProInfoVC")
      
      func proInfoVC(_: Void = ()) -> ProInfoVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: proInfoVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "NavIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'NavIcon' is used in storyboard 'Promotion', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_200") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_200' is used in storyboard 'Promotion', but couldn't be loaded.") }
        if _R.storyboard.promotion().proInfoVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'proInfoVC' could not be loaded from storyboard 'Promotion' as 'ProInfoVC'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
